{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/guoqi/workspace/hello-web-/component/BoilingVerdict/Boil.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\n\nvar Boil = function Boil() {\n  var _s = $RefreshSig$();\n\n  var BoilingVerdict = function BoilingVerdict(props) {\n    console.log('props', props);\n\n    if (props.celsius >= 100) {\n      return __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 14\n        }\n      }, \"The water would boil.\");\n    }\n\n    ;\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 12\n      }\n    }, \"The water would not boil.\");\n  };\n\n  var scaleNames = {\n    c: \"Celsius\",\n    f: \"Fahrenheit\"\n  };\n\n  var TemperatureInput = function TemperatureInput(props) {\n    _s();\n\n    console.log('props', props);\n\n    var _useState = useState(\"0\"),\n        state = _useState[0],\n        setstate = _useState[1];\n\n    var handleChange = function handleChange(e) {\n      console.log('e', e);\n      setstate(e.target.value);\n    };\n\n    return __jsx(\"fieldset\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, __jsx(\"legend\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"Enter temperature in \", scaleNames[props.scale], \" :\"), __jsx(\"input\", {\n      value: state,\n      onChange: function onChange(e) {\n        return handleChange(e);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }), __jsx(BoilingVerdict, {\n      celsius: parseFloat(state),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  _s(TemperatureInput, \"uaNRiE0c4unbRSqCVdavvXLhYbA=\");\n\n  var Ca = function Ca() {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, __jsx(TemperatureInput, {\n      scale: \"c\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }), __jsx(TemperatureInput, {\n      scale: \"f\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Ca, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"this is a Boil component.\"));\n};\n\n_c = Boil;\nBoil.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {});\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Boil;\n\nvar _c;\n\n$RefreshReg$(_c, \"Boil\");","map":{"version":3,"sources":["/Users/guoqi/workspace/hello-web-/component/BoilingVerdict/Boil.tsx"],"names":["React","useState","Boil","BoilingVerdict","props","console","log","celsius","scaleNames","c","f","TemperatureInput","state","setstate","handleChange","e","target","value","scale","parseFloat","Ca","getInitialProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAMA,IAAMC,IAA0B,GAAG,SAA7BA,IAA6B,GAAM;AAAA;;AACvC,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;;AACA,QAAIA,KAAK,CAACG,OAAN,IAAiB,GAArB,EAA0B;AACxB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACD;;AAAA;AACD,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAP;AACD,GAND;;AAOA,MAAMC,UAAU,GAAG;AACjBC,IAAAA,CAAC,EAAE,SADc;AAEjBC,IAAAA,CAAC,EAAE;AAFc,GAAnB;;AAIA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACP,KAAD,EAAW;AAAA;;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;;AADkC,oBAERH,QAAQ,CAAC,GAAD,CAFA;AAAA,QAE3BW,KAF2B;AAAA,QAEpBC,QAFoB;;AAGlC,QAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAO;AAC1BV,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBS,CAAjB;AACAF,MAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,KAHD;;AAKA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA8BT,UAAU,CAACJ,KAAK,CAACc,KAAP,CAAxC,OADF,EAEE;AACE,MAAA,KAAK,EAAEN,KADT;AAEE,MAAA,QAAQ,EAAE,kBAACG,CAAD;AAAA,eAAOD,YAAY,CAACC,CAAD,CAAnB;AAAA,OAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAKE,MAAC,cAAD;AACE,MAAA,OAAO,EAAEI,UAAU,CAACP,KAAD,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAUD,GAlBD;;AAZuC,KAYjCD,gBAZiC;;AAgCvC,MAAMS,EAAE,GAAG,SAALA,EAAK,GAAM;AACf,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,gBAAD;AAAkB,MAAA,KAAK,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,gBAAD;AAAkB,MAAA,KAAK,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD,GAPD;;AASA,SACE,4BACE,MAAC,EAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAFF,CADF;AAMD,CA/CD;;KAAMlB,I;AAiDNA,IAAI,CAACmB,eAAL,yEAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,2CACd,EADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;AAIA,eAAenB,IAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { NextPage } from \"next\";\nimport { loadGetInitialProps } from \"next/dist/next-server/lib/utils\";\n\ntype Props = {};\n\nconst Boil: NextPage<Props, any> = () => {\n  const BoilingVerdict = (props) => {\n    console.log('props', props)\n    if (props.celsius >= 100) {\n      return <p>The water would boil.</p>;\n    };\n    return <p>The water would not boil.</p>;\n  };\n  const scaleNames = {\n    c: \"Celsius\",\n    f: \"Fahrenheit\"\n  };\n  const TemperatureInput = (props) => {\n    console.log('props', props);\n    const [state, setstate] = useState(\"0\");\n    const handleChange = (e) => {\n      console.log('e', e)\n      setstate(e.target.value);\n    };\n\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[props.scale]} :</legend>\n        <input\n          value={state}\n          onChange={(e) => handleChange(e)} />\n        <BoilingVerdict\n          celsius={parseFloat(state)} />\n      </fieldset>\n    );\n  };\n\n  const Ca = () => {\n    return (\n      <div>\n        <TemperatureInput scale=\"c\" />\n        <TemperatureInput scale=\"f\" />\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <Ca />\n      <div>this is a Boil component.</div>\n    </>\n  );\n};\n\nBoil.getInitialProps = async () => {\n  return {};\n};\n\nexport default Boil;"]},"metadata":{},"sourceType":"module"}