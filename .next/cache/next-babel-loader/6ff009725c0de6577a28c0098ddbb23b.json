{"ast":null,"code":"var _jsxFileName = \"/Users/guoqi/workspace/hello-web-/component/BoilingVerdict/Boil.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\n\nconst Boil = () => {\n  const BoilingVerdict = props => {\n    console.log('props', props);\n\n    if (props.celsius >= 100) {\n      return __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 14\n        }\n      }, \"The water would boil.\");\n    }\n\n    ;\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 12\n      }\n    }, \"The water would not boil.\");\n  };\n\n  const scaleNames = {\n    c: \"Celsius\",\n    f: \"Fahrenheit\"\n  };\n\n  const TemperatureInput = props => {\n    console.log('props', props);\n    const {\n      0: state,\n      1: setstate\n    } = useState(\"0\");\n\n    const handleChange = e => {\n      console.log('e', e);\n      setstate(e.target.value);\n    };\n\n    return __jsx(\"fieldset\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, __jsx(\"legend\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, \"Enter temperature in \", scaleNames[props.scale], \" :\"), __jsx(\"input\", {\n      value: state,\n      onChange: e => handleChange(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }), __jsx(BoilingVerdict, {\n      celsius: parseFloat(state),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  const Ca = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, __jsx(TemperatureInput, {\n      scale: \"c\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }), __jsx(TemperatureInput, {\n      scale: \"f\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Ca, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"this is a Boil component.\"));\n};\n\nBoil.getInitialProps = async () => {\n  return {};\n};\n\nexport default Boil;","map":{"version":3,"sources":["/Users/guoqi/workspace/hello-web-/component/BoilingVerdict/Boil.tsx"],"names":["React","useState","Boil","BoilingVerdict","props","console","log","celsius","scaleNames","c","f","TemperatureInput","state","setstate","handleChange","e","target","value","scale","parseFloat","Ca","getInitialProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAOA,MAAMC,IAA0B,GAAG,MAAM;AACvC,QAAMC,cAAc,GAAIC,KAAD,IAAW;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;;AACA,QAAIA,KAAK,CAACG,OAAN,IAAiB,GAArB,EAA0B;AACxB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACD;;AAAA;AACD,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAP;AACD,GAND;;AAOA,QAAMC,UAAU,GAAG;AACjBC,IAAAA,CAAC,EAAE,SADc;AAEjBC,IAAAA,CAAC,EAAE;AAFc,GAAnB;;AAIA,QAAMC,gBAAgB,GAAIP,KAAD,IAAW;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,UAAM;AAAA,SAACQ,KAAD;AAAA,SAAQC;AAAR,QAAoBZ,QAAQ,CAAC,GAAD,CAAlC;;AACA,UAAMa,YAAY,GAAIC,CAAD,IAAO;AAC1BV,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBS,CAAjB;AACAF,MAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACD,KAHD;;AAKA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAA8BT,UAAU,CAACJ,KAAK,CAACc,KAAP,CAAxC,OADF,EAEE;AACE,MAAA,KAAK,EAAEN,KADT;AAEE,MAAA,QAAQ,EAAGG,CAAD,IAAOD,YAAY,CAACC,CAAD,CAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAKE,MAAC,cAAD;AACE,MAAA,OAAO,EAAEI,UAAU,CAACP,KAAD,CADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAUD,GAlBD;;AAoBA,QAAMQ,EAAE,GAAG,MAAM;AACf,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,gBAAD;AAAkB,MAAA,KAAK,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,gBAAD;AAAkB,MAAA,KAAK,EAAC,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD,GAPD;;AASA,SACE,4BACE,MAAC,EAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAFF,CADF;AAMD,CA/CD;;AAiDAlB,IAAI,CAACmB,eAAL,GAAuB,YAAY;AACjC,SAAO,EAAP;AACD,CAFD;;AAIA,eAAenB,IAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { NextPage } from \"next\";\n\nimport { Ca } from \"./styled\";\n\ntype Props = {};\n\nconst Boil: NextPage<Props, any> = () => {\n  const BoilingVerdict = (props) => {\n    console.log('props', props)\n    if (props.celsius >= 100) {\n      return <p>The water would boil.</p>;\n    };\n    return <p>The water would not boil.</p>;\n  };\n  const scaleNames = {\n    c: \"Celsius\",\n    f: \"Fahrenheit\"\n  };\n  const TemperatureInput = (props) => {\n    console.log('props', props);\n    const [state, setstate] = useState(\"0\");\n    const handleChange = (e) => {\n      console.log('e', e)\n      setstate(e.target.value);\n    };\n\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[props.scale]} :</legend>\n        <input\n          value={state}\n          onChange={(e) => handleChange(e)} />\n        <BoilingVerdict\n          celsius={parseFloat(state)} />\n      </fieldset>\n    );\n  };\n\n  const Ca = () => {\n    return (\n      <div>\n        <TemperatureInput scale=\"c\" />\n        <TemperatureInput scale=\"f\" />\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <Ca />\n      <div>this is a Boil component.</div>\n    </>\n  );\n};\n\nBoil.getInitialProps = async () => {\n  return {};\n};\n\nexport default Boil;"]},"metadata":{},"sourceType":"module"}